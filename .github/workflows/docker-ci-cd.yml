name: Docker CI/CD with Bun and Snyk

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]

permissions:
  contents: read
  security-events: write

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v3
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies and run post-install scripts
        run: |
          bun install
          bun pm untrusted || true
          bun pm trust --all || true

      - name: Create .env file
        run: |
          cat << EOF > .env
          COUCHBASE_URL=${{ vars.COUCHBASE_URL }}
          COUCHBASE_USERNAME=${{ vars.COUCHBASE_USERNAME }}
          COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
          COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
          COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
          COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
          PORT=${{ vars.PORT }}
          BASE_URL=${{ vars.BASE_URL }}
          EOF

      - name: Run Snyk to check for vulnerabilities in code
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --sarif-file-output=snyk.sarif

      - name: Upload Snyk code scan results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: snyk.sarif
          category: snyk-code

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: "lab:latest"
          driver: cloud
          endpoint: "zx8086/cldbuild"
          install: true

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: zx8086/url-shortner:latest
          platforms: linux/arm64,linux/amd64
          target: release
          outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry' }}
          build-args: |
            COUCHBASE_URL=${{ vars.COUCHBASE_URL }}
            COUCHBASE_USERNAME=${{ vars.COUCHBASE_USERNAME }}
            COUCHBASE_PASSWORD=${{ secrets.COUCHBASE_PASSWORD }}
            COUCHBASE_BUCKET=${{ vars.COUCHBASE_BUCKET }}
            COUCHBASE_SCOPE=${{ vars.COUCHBASE_SCOPE }}
            COUCHBASE_COLLECTION=${{ vars.COUCHBASE_COLLECTION }}
            PORT=${{ vars.PORT }}
            BASE_URL=${{ vars.BASE_URL }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: zx8086/url-shortner:latest
          args: --file=Dockerfile --severity-threshold=high

      - name: Run Snyk and generate SARIF
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Run Snyk test using Bun and capture output
          bun run snyk test --docker zx8086/url-shortner:latest --json | \
          jq '{
            "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
            "version": "2.1.0",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "Snyk Docker",
                    "rules": [.vulnerabilities[] | {
                      "id": .id,
                      "shortDescription": {
                        "text": .title
                      },
                      "fullDescription": {
                        "text": .description
                      },
                      "help": {
                        "text": .description
                      },
                      "properties": {
                        "tags": [
                          "security",
                          .severity
                        ]
                      }
                    }]
                  }
                },
                "results": [.vulnerabilities[] | {
                  "ruleId": .id,
                  "message": {
                    "text": .title
                  },
                  "locations": [
                    {
                      "physicalLocation": {
                        "artifactLocation": {
                          "uri": "Dockerfile"
                        },
                        "region": {
                          "startLine": 1,
                          "startColumn": 1,
                          "endLine": 1,
                          "endColumn": 1
                        }
                      }
                    }
                  ]
                }]
              }
            ]
          }' > snyk-docker.sarif

          # Check if the SARIF file is empty and create a valid empty SARIF if so
          if [ ! -s snyk-docker.sarif ]; then
            echo '{
              "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
              "version": "2.1.0",
              "runs": [
                {
                  "tool": {
                    "driver": {
                      "name": "Snyk Docker",
                      "rules": []
                    }
                  },
                  "results": []
                }
              ]
            }' > snyk-docker.sarif
          fi

      - name: Check SARIF file
        run: |
          if [ -f "snyk-docker.sarif" ]; then
            echo "SARIF file exists"
            cat snyk-docker.sarif
          else
            echo "SARIF file does not exist"
          fi

      - name: Upload Docker Snyk scan results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        continue-on-error: true
        with:
          sarif_file: snyk-docker.sarif
          category: snyk-docker

      - name: Cleanup
        if: always()
        run: |
          rm -f .env
          rm -f snyk.sarif snyk-docker.sarif || true
          docker image prune -f
          docker volume prune -f
          echo "Cleanup completed"

      - name: Inspect Docker image
        run: |
          docker image inspect zx8086/url-shortner:latest
          docker history zx8086/url-shortner:latest

